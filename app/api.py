import json

import boto3
import requests
from flask import Flask, jsonify, request, current_app

app = Flask(__name__)

app.config.update({
    'DEBUG': True,
    'BOT_AUTH_TOKEN': 'xoxb-266187881557-AhjeDRPIKfVeTSfoZXlQUnGu'  #TODO: don't commit me
})



@app.route('/hello', methods=['POST'])
def hello():
    return jsonify({
        'hello': 'world'
    })


@app.route('/slack-event', methods=['POST'])
def slack_event():
    current_app.logger.debug(f'Receieved : {request.json}')

    if request.json.get('type') == 'url_verification':
        return request.json['challenge']

    event = request.json.get('event')
    if not event:
        current_app.logger.debug('Unknown payload received')
        return ''

    # Discriminate between events generated by the users, which we want to
    # process and handle, and those generated by a bot.
    if 'bot_id' in event:
        current_app.logger.debug('Ignoring bot event')
        return ''

    # Get the text of the message the user sent to the bot and the conversation
    # where the message was posted
    text = event['text']
    channel_id = event['channel']


    send_message(channel_id, text[::-1])

    api_name = 'users'
    api_info = get_info(api_name)['git']
    if 'deployment_date' in api_info:
        message = f'*{api_name}* was last deployed by f{api_info["deployment_user"]} on f{api_info["date"]}'
    else:
        message = f'*{api_name}* was last deployed by *f{api_info["user"]}*'

    send_message(channel_id, message)

    return ''


def send_message(channel, text):
    payload = {
        'as_user': False,
        'channel': channel,
        # 'icon_emoji': 'lower_left_paintbrush',  # TODO: set as default
        'text': text,
    }

    response = requests.post(
        'https://slack.com/api/chat.postMessage',
        data=json.dumps(payload),
        headers={
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {current_app.config["BOT_AUTH_TOKEN"]}'
        }
    )
    response.raise_for_status()
    content = response.json()
    if not content.get('ok'):
        current_app.logger.warning(content)


def get_info(api_name):
    response = requests.get(f'https://api.boughtbymany.com/{api_name}/ping')
    response.raise_for_status()
    current_app.logger.debug(response.json())
    return response.json()

def get_boto3_session():
    return boto3.Session()

def get_all_api_info():


    def run(self):
        apigateway = self.session.client('apigateway')
    response = apigateway.get_domain_names(limit=500)
    for domain_name in response['items']:
        print(domain_name)



    apigateway = get_boto3_session().client('apigateway')
    keys = apigateway.get_base_path_mappings(
        domainName=domain_name, limit=500
    )
